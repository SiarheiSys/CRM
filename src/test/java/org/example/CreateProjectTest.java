package org.example;
// Generated by Selenium IDE

import org.example.crm.CreateProjectPage;
import org.example.crm.CrmStartPage;
import org.example.crm.PanelControlPage;
import org.example.crm.ProjectsPage;
import org.junit.jupiter.api.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.logging.LogEntries;
import org.openqa.selenium.logging.LogEntry;
import org.openqa.selenium.logging.LogType;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;


import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;


public class CreateProjectTest {
  private WebDriver driver;

  public void waiting(String str, int sec) {
    new WebDriverWait(driver, sec).until(ExpectedConditions.titleContains(str));
  }

  public void waitSimple(int sec) {
    new WebDriverWait(driver, sec);
  }

  @BeforeEach
  public void setUp() {
    System.setProperty("webdriver.chrome.driver", "chromedriver.exe");
    driver = new ChromeDriver();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
    driver.manage().window().maximize();
  }

  @AfterEach
  public void tearDown() {
    LogEntries browserLogs = driver.manage().logs().get(LogType.BROWSER);
    List<LogEntry> allLogRows = browserLogs.getAll();
    if (allLogRows.size() > 0 ) {
      try (BufferedWriter out = new BufferedWriter(new FileWriter("logs.log", true))){
        out.write(String.valueOf(allLogRows));
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    driver.quit();
  }

  @DisplayName("Создание проекта")
  @Test
  public void createProject() {
    driver.get("https://crm.geekbrains.space/user/login");
    CrmStartPage startPage = new CrmStartPage(driver);
    Assertions.assertNotNull(startPage.getTitle(), "Нет заголовка окна");
    Assertions.assertEquals("Логин", driver.getTitle());
    startPage.usernameFieldSendKeys("Applanatest1")
            .passwordFieldSendKeys("Student2020!");
    Assertions.assertNotNull(startPage.getUsernameField(), "Поле 'логин' не заполнено");
    Assertions.assertEquals("Applanatest1", startPage.getUsernameField().getAttribute("value"));
    Assertions.assertNotNull(startPage.getPasswordField(), "Поле 'пароль' не заполнено");
    Assertions.assertEquals("Student2020!", startPage.getPasswordField().getAttribute("value"));
    Assertions.assertEquals("Войти", startPage.getSubmitBtn().getText());
    startPage.submitBtnClick();
    waiting("Панель инструментов", 30);
    PanelControlPage panelControl = new PanelControlPage(driver);
    Assertions.assertNotNull(panelControl.getTitle(), "Нет заголовка окна");
    Assertions.assertEquals("Панель инструментов", driver.getTitle());
    panelControl.projectsClick()
            .myProjectsClick();
    waiting("Все - Мои проекты - Все проекты - Проекты", 30);
    ProjectsPage projects = new ProjectsPage(driver);
    Assertions.assertNotNull(projects.getTitle(), "Нет заголовка окна");
    Assertions.assertEquals("Все - Мои проекты - Все проекты - Проекты", driver.getTitle());
    Assertions.assertEquals("Создать проект", projects.getCreateProjects().getText());
    projects.createProjectsClick();
    waiting("Создать проект - Все проекты - Проекты", 30);
    CreateProjectPage projectPage = new CreateProjectPage(driver);
    Assertions.assertNotNull(projectPage.getTitle(), "Нет заголовка окна");
    Assertions.assertEquals("Создать проект - Все проекты - Проекты", driver.getTitle());
    projectPage.nameSendKeys("Обучение AQA");
    Assertions.assertNotNull(projectPage.getName(), "Поле 'Название проекта' не заполнено");
    Assertions.assertEquals("Обучение AQA", projectPage.getName().getAttribute("value"));
    projectPage.chooseOrganisationClick();
    waitSimple(30);
    Assertions.assertTrue(projectPage.getOrganisation().isDisplayed());
    projectPage.organisationClick()
            .choosePersonClick();
    waitSimple(30);
    Assertions.assertTrue(projectPage.getPerson().isDisplayed());
    projectPage.personClick()
            .chooseBusinessUnitClick();
    waitSimple(30);
    Assertions.assertTrue(projectPage.getBusinessUnit().isDisplayed());
    projectPage.businessUnitClick()
            .chooseCuratorClick();
    waitSimple(30);
    Assertions.assertTrue(projectPage.getCurator().isDisplayed());
    projectPage.curatorClick()
            .chooseProjectHeadClick();
    waitSimple(30);
    Assertions.assertTrue(projectPage.getProjectHead().isDisplayed());
    projectPage.projectHeadClick()
            .chooseAdministratorClick();
    waitSimple(30);
    Assertions.assertTrue(projectPage.getAdministrator().isDisplayed());
    projectPage.administratorClick()
            .chooseManagerClick();
    waitSimple(30);
    Assertions.assertTrue(projectPage.getManager().isDisplayed());
    projectPage.managerClick();
    Assertions.assertEquals("Сохранить и закрыть", projectPage.getSaveAndCloseBtn().getText());
    projectPage.saveAndCloseBtnClick();
  }
}
